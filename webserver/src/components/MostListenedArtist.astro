<div class="w-full md:px-16 pb-12">
    <h1 class="text-3xl font-bold py-4 pb-12 text-gray-700" id="most-played-artist-title" style="display: none;">
        Your most played artists were:
    </h1>
    <div id="most-played-artist" class="flex md:flex-row mx-12 gap-12"></div>
</div>

<script>
    import axios from 'axios';
    var bearer_token =
        'BQBvzbg76IUC2CF4FS0sSo-NHn0yvAhA7d6TGAIKc2RZJfx0v1dOJ28PpwuTRKzQJUKtNL8846xkwe7s8EbuLFYnrUTxmpCv2MRIBeqhpnWUKy_up9o';
    //getArstistId code autogenerated
    async function getArtistId(artistName) {
        try {
            const response = await axios.get('https://api.spotify.com/v1/search', {
                params: {
                    q: artistName,
                    type: 'artist',
                    limit: 1,
                },
                headers: {
                    Authorization: 'Bearer ' + bearer_token, // Replace with your Spotify API access token
                },
            });

            const artistId = response.data.artists.items[0].id;
            return artistId;
        } catch (error) {
            console.error('Error retrieving artist ID:', error.message);
        }
    }
    async function get_top_artists(fileData) {
        let artists_ids = [];
        for (let i = 0; i < fileData.length; i++) {
            if (i == 3) break;
            try {
                artists_ids.push(await getArtistId(fileData[i].master_metadata_album_artist_name));
            } catch {
                return null;
            }
        }
        return artists_ids;
    }
    document.addEventListener('fileParsingComplete', function (event) {
        var parsedData = event.detail;
        callbackParsing(parsedData);
    });

    function callbackParsing(fileData) {
        console.log('JSON merged data: listened artist', fileData);
        //Parses the string to a date object
        fileData = fileData.map((data) => ({
            ...data,
            parsedDate: new Date(data.ts),
        }));
        fileData = fileData.map((data) => ({
            ...data,
            year: data.parsedDate.getFullYear() + data.parsedDate.getMonth() / 10,
        }));
        fileData = fileData.map((data) => ({
            ...data,
            value: data.ms_played,
        }));
        console.log('Grouped data: ', fileData);

        //Sum values by same artist name and year
        var reducedArray = fileData.reduce(function (acc, curr) {
            var key = curr.spotify_track_uri;
            var valName = curr.master_metadata_album_artist_name;
            if (acc.hasOwnProperty(key)) {
                acc[key].value += curr.value;
            } else {
                acc[key] = {
                    spotify_track_uri: curr.spotify_track_uri,
                    master_metadata_album_artist_name: valName,
                    value: curr.value,
                };
            }
            return acc;
        }, {});

        fileData = Object.values(reducedArray);
        console.log('Summed data:', fileData);
        fileData.sort((a, b) => b.value - a.value);

        get_top_artists(fileData).then((arrIds) => {
            if (arrIds !== null && arrIds.length > 1 && arrIds.length < 4 && arrIds[0] !== undefined) {
                console.log('artist', arrIds);

                for (let i = 0; i < 3; i++) {
                    const trackId = arrIds[i];
                    const trackUri = `https://open.spotify.com/embed/artist/${trackId}`;
                    const ifrm = document.createElement('iframe');
                    console.log('Track URI: ', trackUri);
                    ifrm.style.width = '100%';
                    ifrm.style.height = '352';
                    ifrm.setAttribute('width', '100%');
                    ifrm.setAttribute('height', '352');
                    ifrm.setAttribute('frameBorder', '0');
                    ifrm.setAttribute('id', `iframe-most-played-s${i}`);
                    ifrm.setAttribute(
                        'allow',
                        'autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture'
                    );
                    ifrm.setAttribute('src', trackUri);
                    const old = document.getElementById(`iframe-most-played-s${i}`);
                    if (old) {
                        old.remove();
                    }
                    document.getElementById('most-played-artist').appendChild(ifrm);
                }

                //Show header title
                document.getElementById('most-played-artist-title').style.display = 'block';
            // } else {
            //     console.log('artist error');
            //     console.log('artist', arrIds);
            //     for (let i = 0; i < 3; i++) {
            //         const paragraph = document.createElement('p');
            //         paragraph.textContent = `#${i + 1}\n ${fileData[i].master_metadata_album_artist_name}`;
            //         paragraph.style.textAlign = 'center';
            //         paragraph.style.fontSize = '50px';
            //         paragraph.style.fontWeight = 'bold';
            //         paragraph.style.marginTop = '10px';
            //         paragraph.style.marginLeft = '100px';

            //         document.getElementById('most-played-artist').appendChild(paragraph);
            //     }
            //     document.getElementById('most-played-artist-title').style.display = 'block';
            }
        });
    }
</script>
