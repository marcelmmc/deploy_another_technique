<div class = "radarChart" >
</div>


<head>
    <title>JavaScript D3 Example</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
  </head>
  

<script is:inline>
// import * as d3 from "d3"

var margin = {
        top: 100,
        right: 100,
        bottom: 100,
        left: 100
    },
    width = Math.min(700, window.innerWidth - 10) - margin.left - margin.right,
    height = Math.min(width, window.innerHeight - margin.top - margin.bottom - 20);



var color = d3.scaleOrdinal()
    .range(["#EDC951", "#CC333F", "#00A0B0"]);

var radarChartOptions = {
    w: width,
    h: height,
    margin: margin,
    maxValue: 0.5,
    levels: 5,
    roundStrokes: true,
    color: color
};

document.addEventListener('fileParsingComplete', function(event) {
		var parsedData = event.detail;
		callbackParsing(parsedData);
	});

function callbackParsing(fileData) {
    console.log("JSON data: ", fileData)
    fileData = fileData.map((data) => ({
            ...data,
            dayOfWeek: new Date(data.ts).getDay()
        }))
        .filter((data) => data.ms_played > 10000)

    const grouped = d3.group(fileData, d => d.dayOfWeek)

    const meanListeningTimesPerDay = []

    for (let [key, value] of grouped) {
        console.log("Value: ", value)
        const summed = value.reduce((a, b) => a + b.ms_played / 1000, 0) / value.length
        meanListeningTimesPerDay.push({
            "axis": key,
            "value": summed
        })
    }

    console.log("Mean listening times:", meanListeningTimesPerDay)

    RadarChart(".radarChart", [meanListeningTimesPerDay], radarChartOptions);
    document.getElementById("radarChart-title").style.display = "block";
}


function RadarChart(id, data) {
    var config = {
        w: 800, 
        h: 800, 
        margin: {
            top: 20,
            right: 20,
            bottom: 20,
            left: 20
        }, 
    };

    var allAxis = (data[0].map(function(i, j) {
            return i.axis
        })),
        total = allAxis.length 

	let rScal = d3.scaleLinear()
    .domain([0, 200])
    .range([0, 180]);

    var weekday = new Array(7);
    weekday[0] = "Monday";
    weekday[1] = "Tuesday";
    weekday[2] = "Wednesday";
    weekday[3] = "Thursday";
    weekday[4] = "Friday";
    weekday[5] = "Saturday";
    weekday[6] = "Sunday";

    d3.select(id).select("svg").remove();

    var svg = d3.select(id).append("svg")
	.attr("height", config.h + config.margin.top + config.margin.bottom)
	.attr("width", config.w + config.margin.left + config.margin.right)
	let seps = [40, 80, 120, 160, 200];
    var g = svg.append("g")
        .attr("transform", "translate(" + (config.w / 5) + "," + (config.h / 5) + ")");

    function angToCoord(angle, value){
    console.log("Angle: ", angle)
    console.log("Value: ", value)
    let x = Math.cos(angle)*rScal(value);

    let y = Math.sin(angle)* rScal(value);

    return {"x": width/ 2 + x, "y": height / 2 - y};
    }
	g.selectAll("circle")
    .data(seps)
    .join(
        enter => enter.append("circle")
        .attr("cy", height / 2)

            .attr("cx", width / 2)
            .attr("stroke", "gray")
            .attr("r", d => rScal(d))
            .attr("fill", "none")

    );

    g.selectAll(".seplabl")
        .data(seps)
    .join(
        enter => enter
            .append("text")
            .attr("class", "seplabel")
            .attr("y", d => height/2-rScal(d))
            .attr("x", width / 2 + 5)
            .text(d => d.toString() + "s")
    );

    let featureData = allAxis.map((f, i) => {
    let angle = (Math.PI / 2) + (2 * Math.PI * i / total);
    return {
        name: weekday[f],
        line_coord: angToCoord(angle, 200),
        label_coord: angToCoord(angle, 240)
        };
    });


    // draw axis line
    g.selectAll("line")
        .data(featureData)
        .join(
            enter => enter.append("line")
                .attr("x1", width / 2)
                .attr("y1", height / 2)
                .attr("x2", d => d.line_coord.x)
                .attr("y2", d => d.line_coord.y)
                .attr("stroke","black")
    );

        g.selectAll(".axislabel")
            .data(featureData)
            .join(
                enter => enter.append("text")
                    .attr("x", d => d.label_coord.x)
                    .attr("y", d => d.label_coord.y)
                    .text(d => d.name)
            );

    let line = d3.line()
    .x(d => d.x)
    .y(d => d.y);

    function computeCoord(d){
        console.log("D: ", d)
        let coordinates = [];
        for (var i = 0; i < allAxis.length; i++){
            let angle = (Math.PI / 2) + (2 * Math.PI * i / total);
            coordinates.push(angToCoord(angle, d[i].value));
        }
        console.log("Coordinates: ", coordinates)
        return coordinates;
    }

    g.selectAll("path")
        .data(data)
        .join(
            enter => enter.append("path")
                .datum(d => computeCoord(d))
                .attr("d", line)
                .attr("stroke-width", 3)
                .attr("stroke","#1CD760")
                .attr("fill", "#1CD760")
                .attr("stroke-opacity", 1)
                .attr("opacity", 0.5)
        );

} 
</script>